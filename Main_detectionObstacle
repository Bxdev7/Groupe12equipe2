#include <msp430.h> 


/*Pin du moteur :
 * P2.0 (INPUT)  = Vitesse moteur gauche (A)
 * P2.1 (OUTPUT) = Sens de rotation de A
 * P2.2 (OUTPUT) = PWM de A
 * P2.3 (INPUT)  = Vitesse moteur droite (B)
 * P2.4 (OUTPUT) = PWM de B
 * P2.5 (OUTPUT) = Sens de rotation de B*/


/*Pin des capteurs :
 * P1.0
 * P1.1
 * P1.2
 */

/*
 * Fonction
 */


void tDroite(){

    P2OUT &= BIT1;
    TA1CCR1 = 1000; // determine le rapport cyclique du signal
    P2OUT &= BIT5;
    TA1CCR2 = 1000; // determine le rapport cyclique du signal

}


void tGauche(){
    P2OUT |= BIT1;
    TA1CCR1 = 1000; // determine le rapport cyclique du signal
    P2OUT |= BIT5;
    TA1CCR2 = 1000; // determine le rapport cyclique du signal
}

void Avancer(){

    P2OUT &= ~BIT1;
    TA1CCR1 = 1000; // determine le rapport cyclique du signal
    P2OUT |= BIT5;
    TA1CCR2 = 1000; // determine le rapport cyclique du signal
}

void Arreter(){
    TA1CCR1 = 0; // determine le rapport cyclique du signal
    TA1CCR2 = 0; // determine le rapport cyclique du signal

}

float detectionObstacle(){

}

float detectionPhotoGauche(){

}

float detectionPhotoDroite(){

}


/**
 * main.c
 */

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	int TravelFlag  = 1;
	int etape = 0;

	P2DIR = 0x36; //Regler les P2: XX11 0110  0:INPUT  1:OUTPUT
	P1DIR = 0x00; //Regler les P1 en input car connecter au capteur

	P2SEL |= BIT2; // selection fonction TA1.1
	P2SEL |= BIT4; // selection fonction TA1.1

	TA1CTL = TASSEL_2 | MC_1; // source SMCLK pour TimerA , mode comptage Up
	TA1CCR0 = 2000; // determine la periode du signal

	TA1CCTL1 |= OUTMOD_7; // activation mode de sortie n°7 de TA1.1
	TA1CCTL2 |= OUTMOD_7; // activation mode de sortie n°7 de TA1.2


	while(TravelFlag == 1){
	      switch(etape){
	      case 0 :
	          /*Etape 0 conçacrer à la gestion des capteurs*/

	          /*Gestion de la détection d'obstacle*/
	          if(detectionObstacle() < /*10cm*/ ){
	              etape = 1;
	          }else if(detectionPhotoGauche() >= detectionPhotoDroite()){ //si la photoresistance de gauche détecte la bande blanche
	              etape = 2;
	          }else if(detectionPhotoDroite() >= detectionPhotoGauche()){ //si la photoresistance de droite détecte la bande blanche
                  etape = 3;
              }else if(detectionPhotoDroite() == detectionPhotoGauche()){ //si les photoresistances sont globalement égales
                  etape = 4;
              }
	          break;
	      case 1 :
	          /* il ne passe rien on attent que l'obstacle soit retirer
	           * peut être qu'il est nécessaire de faire une fonction arrêt*/
	          break;
	      case 2 :
	          tGauche();
	          break;
	      case 3 :
	          tDroite();
	          break;
	      case 4 :
	          Avancer();
	          break;
	      }
	}

}



